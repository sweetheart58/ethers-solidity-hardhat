{
  "address": "0xf3389b847b95af5099E48088C6530E04C8AEDdA8",
  "abi": [
    {
      "inputs": [],
      "name": "Wallet__FailedToTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Wallet__ValueIsLessThanTotalAmounts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Wallet__ValueShouldBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Wallet__ZeroBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x41f3ad6d4447f930b0495bb21cc58e0f1a4d35258e74c023c590cef489442e46",
  "receipt": {
    "to": null,
    "from": "0x1eF4C1db7c299c9B5248dA1FF8E4805fD6F4D4D1",
    "contractAddress": "0xf3389b847b95af5099E48088C6530E04C8AEDdA8",
    "transactionIndex": 44,
    "gasUsed": "1066273",
    "logsBloom": "0x
    "blockHash": "0xe1ee381bb0d3aa23a0e89fef591be7e5f0fae56209680813d57f5c883640960f",
    "transactionHash": "0x41f3ad6d4447f930b0495bb21cc58e0f1a4d35258e74c023c590cef489442e46",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 8231505,
        "transactionHash": "0x41f3ad6d4447f930b0495bb21cc58e0f1a4d35258e74c023c590cef489442e46",
        "address": "0xf3389b847b95af5099E48088C6530E04C8AEDdA8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ef4c1db7c299c9b5248da1ff8e4805fd6f4d4d1"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0xe1ee381bb0d3aa23a0e89fef591be7e5f0fae56209680813d57f5c883640960f"
      }
    ],
    "blockNumber": 8231505,
    "cumulativeGasUsed": "8686780",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e44983c24c0f36bf3ba50fe482fde533",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Wallet__FailedToTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Wallet__ValueIsLessThanTotalAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Wallet__ValueShouldBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Wallet__ZeroBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ali Murtaza Memon\",\"custom:portfolio\":\"This is a portfolio smart contract.\",\"events\":{\"Deposit(address,address,uint256,uint256)\":{\"params\":{\"receiver\":\"is the address of the contract which will receive the user funds.\",\"sender\":\"is the address of the caller of deposit function.\",\"timestamp\":\"is the time when the event will trigger.\",\"value\":\"is the uint256 type amount that sender will deposit.\"}},\"Transfer(address,address[],uint256,uint256[])\":{\"params\":{\"amounts\":\"is the  the array of amounts according the order of addresses which receivers will receive.\",\"from\":\"is the address of user tranfering funds.\",\"timestamp\":\"is the time when this event will trigger.\",\"to\":\"is the array of addressess of users who will receive funds.\"}},\"Withdraw(address,uint256,uint256)\":{\"params\":{\"caller\":\"is the address of the user who will call the withdraw function.\",\"timestamp\":\"is the time when this event will trigger.\",\"value\":\"is the amount that will be withdrawn from user balance.\"}}},\"kind\":\"dev\",\"methods\":{\"getBalance(address)\":{\"params\":{\"accountAddress\":\"of the user.\"},\"returns\":{\"_0\":\"balance of user of type uint256 will be returned.\"}},\"getContractBalance()\":{\"returns\":{\"_0\":\"balance of smart contract of type uint256 will be returned.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address[],uint256[])\":{\"details\":\"This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.The length of addresses and amounts array should be equal.The sum of amounts should not be greater than the msg.value.example: If the msg.value will be let's say 4 ethers and we only tranfer 2 ethers to addresses then 2 ethers will store inside the contract address. This could be accidental state.\",\"params\":{\"amounts\":\"will be an array of amounts.\",\"receivers\":\"will be an array of addresses.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.\"}},\"title\":\"Wallet Smart Contract\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,address,uint256,uint256)\":{\"notice\":\"Emit the information about sender and the amount it deposited on deposit function call.\"},\"Transfer(address,address[],uint256,uint256[])\":{\"notice\":\"Emit the information about sender, receivers, amounts and the timestamp when the transfer event will trigger.\"},\"Withdraw(address,uint256,uint256)\":{\"notice\":\"Emit the information about the caller, amount and timestamp when this event will trigger.\"}},\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"using deposit function any users can store their funds to their allocated mapping location.\"},\"getBalance(address)\":{\"notice\":\"getBalance will return the balance information of users funds.\"},\"getContractBalance()\":{\"notice\":\"contractBalance will return the balance information of a smart contract.\"},\"transfer(address[],uint256[])\":{\"notice\":\"using transfer function users can transfer funds to address(s).\"},\"withdraw()\":{\"notice\":\"using withdraw function users can get back their funds.\"}},\"notice\":\"This smart contract works as a bank, users can deposit, withdrawn and transfer funds to other addresses.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Wallet.sol\":\"Wallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// * imports\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// * custom erros\\nerror Wallet__FailedToTransfer();\\nerror Wallet__ZeroBalance();\\nerror Wallet__ValueShouldBeGreaterThanZero();\\nerror Wallet__ValueIsLessThanTotalAmounts();\\n\\n/**\\n    @title Wallet Smart Contract\\n    @author Ali Murtaza Memon\\n    @notice This smart contract works as a bank, users can deposit, withdrawn and transfer funds to other addresses.\\n    @custom:portfolio This is a portfolio smart contract.\\n*/\\ncontract Wallet is ReentrancyGuard, Ownable {\\n    // * STATIC VARIABLES\\n\\n    // * mappings\\n    mapping(address => uint256) private s_addressToFunds;\\n\\n    // * EVENTS\\n    /**\\n     * @notice Emit the information about sender and the amount it deposited on deposit function call.\\n     * @param sender is the address of the caller of deposit function.\\n     * @param receiver is the address of the contract which will receive the user funds.\\n     * @param timestamp is the time when the event will trigger.\\n     * @param value is the uint256 type amount that sender will deposit.\\n     */\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 indexed timestamp,\\n        uint256 value\\n    );\\n    /**\\n     * @notice Emit the information about the caller, amount and timestamp when this event will trigger.\\n     * @param caller is the address of the user who will call the withdraw function.\\n     * @param value is the amount that will be withdrawn from user balance.\\n     * @param timestamp is the time when this event will trigger.\\n     */\\n    event Withdraw(\\n        address indexed caller,\\n        uint256 indexed value,\\n        uint256 indexed timestamp\\n    );\\n    /**\\n     * @notice Emit the information about sender, receivers, amounts and the timestamp when the transfer event will trigger.\\n     * @param from is the address of user tranfering funds.\\n     * @param to is the array of addressess of users who will receive funds.\\n     * @param timestamp is the time when this event will trigger.\\n     * @param amounts is the  the array of amounts according the order of addresses which receivers will receive.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address[] indexed to,\\n        uint256 indexed timestamp,\\n        uint256[] amounts\\n    );\\n\\n    // * FUNCTIONS\\n\\n    // * receive function\\n    receive() external payable {}\\n\\n    // * fallback function\\n    fallback() external payable {}\\n\\n    // * external functions\\n\\n    /**\\n        @notice using deposit function any users can store their funds to their allocated mapping location.\\n    */\\n    function deposit() external payable {\\n        if (msg.value <= 0) {\\n            revert Wallet__ValueShouldBeGreaterThanZero();\\n        }\\n\\n        s_addressToFunds[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, address(this), msg.value, block.timestamp);\\n    }\\n\\n    /**\\n        @notice using withdraw function users can get back their funds.\\n        @dev This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.\\n    */\\n    function withdraw() external nonReentrant {\\n        uint256 amount = s_addressToFunds[msg.sender];\\n\\n        if (amount <= 0) {\\n            revert Wallet__ZeroBalance();\\n        }\\n\\n        s_addressToFunds[msg.sender] = 0;\\n\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Wallet__FailedToTransfer();\\n        }\\n        emit Withdraw(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /**\\n        @notice using transfer function users can transfer funds to address(s).\\n        @dev This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.\\n        @dev The length of addresses and amounts array should be equal.\\n        @dev The sum of amounts should not be greater than the msg.value.\\n        @dev example: If the msg.value will be let's say 4 ethers and we only tranfer 2 ethers to addresses then 2 ethers will store inside the contract address. This could be accidental state.\\n        @param receivers will be an array of addresses.\\n        @param amounts will be an array of amounts.\\n    */\\n    function transfer(\\n        address[] memory receivers,\\n        uint256[] memory amounts\\n    ) external payable nonReentrant {\\n        if (msg.value <= 0) {\\n            revert Wallet__ValueShouldBeGreaterThanZero();\\n        }\\n\\n        // * calculate the sum of amounts.\\n        uint256 sum = 0;\\n\\n        for (uint16 i = 0; i < amounts.length; i++) {\\n            sum += amounts[i];\\n        }\\n\\n        // * check if sum is greater than `msg.value` then revert the error.\\n        if (sum > msg.value) {\\n            revert Wallet__ValueIsLessThanTotalAmounts();\\n        }\\n\\n        for (uint16 i = 0; i < receivers.length; i++) {\\n            address receiver = receivers[i];\\n            uint256 amount = amounts[i];\\n\\n            (bool success, ) = payable(receiver).call{value: amount}(\\\"\\\");\\n            if (!success) {\\n                revert Wallet__FailedToTransfer();\\n            }\\n        }\\n        emit Transfer(msg.sender, receivers, block.timestamp, amounts);\\n    }\\n\\n    // * view function\\n\\n    /**\\n        @notice getBalance will return the balance information of users funds.\\n        @param accountAddress of the user.\\n        @return balance of user of type uint256 will be returned.\\n    */\\n    function getBalance(\\n        address accountAddress\\n    ) external view returns (uint256) {\\n        return s_addressToFunds[accountAddress];\\n    }\\n\\n    /**\\n        @notice contractBalance will return the balance information of a smart contract.\\n        @return balance of smart contract of type uint256 will be returned.\\n    */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x54af025267cd1355f78b8a33fbd61fed6e334264d422703eda820257712a6981\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160008190555061003561002a61003a60201b60201c565b61004260201b60201c565b610108565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611182806101176000396000f3fe60806040526004361061007f5760003560e01c8063d0e30db01161004e578063d0e30db01461010c578063f2fde38b14610116578063f8b2cb4f1461013f578063ffc3a7691461017c57610086565b80633ccfd60b146100885780636f9fb98a1461009f578063715018a6146100ca5780638da5cb5b146100e157610086565b3661008657005b005b34801561009457600080fd5b5061009d610198565b005b3480156100ab57600080fd5b506100b4610357565b6040516100c1919061096e565b60405180910390f35b3480156100d657600080fd5b506100df61035f565b005b3480156100ed57600080fd5b506100f6610373565b60405161010391906109ca565b60405180910390f35b61011461039d565b005b34801561012257600080fd5b5061013d60048036038101906101389190610a25565b610495565b005b34801561014b57600080fd5b5061016660048036038101906101619190610a25565b610518565b604051610173919061096e565b60405180910390f35b61019660048036038101906101919190610c9a565b610561565b005b6101a06107b0565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161021e576040517f483720f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161028990610d43565b60006040518083038185875af1925050503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b5050905080610306576040517fa5f1298c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42823373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860405160405180910390a450506103556107ff565b565b600047905090565b610367610809565b6103716000610887565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600034116103d7576040517fa0d73a6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104269190610d87565b92505081905550343073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d74260405161048b919061096e565b60405180910390a4565b61049d610809565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610e3e565b60405180910390fd5b61051581610887565b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105696107b0565b600034116105a3576040517fa0d73a6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b82518161ffff1610156105f357828161ffff16815181106105cb576105ca610e5e565b5b6020026020010151826105de9190610d87565b915080806105eb90610e9b565b9150506105a7565b503481111561062e576040517fab37f93600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518161ffff16101561073d576000848261ffff168151811061065757610656610e5e565b5b602002602001015190506000848361ffff168151811061067a57610679610e5e565b5b6020026020010151905060008273ffffffffffffffffffffffffffffffffffffffff16826040516106aa90610d43565b60006040518083038185875af1925050503d80600081146106e7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ec565b606091505b5050905080610727576040517fa5f1298c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050808061073590610e9b565b915050610631565b50428360405161074d9190610f7d565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f5289ea29c00d54993a3df17183f2e808fac6b4734c61c932955a66908248a4138560405161079b9190611052565b60405180910390a4506107ac6107ff565b5050565b6002600054036107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec906110c0565b60405180910390fd5b6002600081905550565b6001600081905550565b61081161094d565b73ffffffffffffffffffffffffffffffffffffffff1661082f610373565b73ffffffffffffffffffffffffffffffffffffffff1614610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c9061112c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61096881610955565b82525050565b6000602082019050610983600083018461095f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b482610989565b9050919050565b6109c4816109a9565b82525050565b60006020820190506109df60008301846109bb565b92915050565b6000604051905090565b600080fd5b600080fd5b610a02816109a9565b8114610a0d57600080fd5b50565b600081359050610a1f816109f9565b92915050565b600060208284031215610a3b57610a3a6109ef565b5b6000610a4984828501610a10565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610aa082610a57565b810181811067ffffffffffffffff82111715610abf57610abe610a68565b5b80604052505050565b6000610ad26109e5565b9050610ade8282610a97565b919050565b600067ffffffffffffffff821115610afe57610afd610a68565b5b602082029050602081019050919050565b600080fd5b6000610b27610b2284610ae3565b610ac8565b90508083825260208201905060208402830185811115610b4a57610b49610b0f565b5b835b81811015610b735780610b5f8882610a10565b845260208401935050602081019050610b4c565b5050509392505050565b600082601f830112610b9257610b91610a52565b5b8135610ba2848260208601610b14565b91505092915050565b600067ffffffffffffffff821115610bc657610bc5610a68565b5b602082029050602081019050919050565b610be081610955565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b6000610c16610c1184610bab565b610ac8565b90508083825260208201905060208402830185811115610c3957610c38610b0f565b5b835b81811015610c625780610c4e8882610bee565b845260208401935050602081019050610c3b565b5050509392505050565b600082601f830112610c8157610c80610a52565b5b8135610c91848260208601610c03565b91505092915050565b60008060408385031215610cb157610cb06109ef565b5b600083013567ffffffffffffffff811115610ccf57610cce6109f4565b5b610cdb85828601610b7d565b925050602083013567ffffffffffffffff811115610cfc57610cfb6109f4565b5b610d0885828601610c6c565b9150509250929050565b600081905092915050565b50565b6000610d2d600083610d12565b9150610d3882610d1d565b600082019050919050565b6000610d4e82610d20565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9282610955565b9150610d9d83610955565b9250828201905080821115610db557610db4610d58565b5b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e28602683610dbb565b9150610e3382610dcc565b604082019050919050565b60006020820190508181036000830152610e5781610e1b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061ffff82169050919050565b6000610ea682610e8d565b915061ffff8203610eba57610eb9610d58565b5b600182019050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b610ef4816109a9565b82525050565b6000610f068383610eeb565b60208301905092915050565b6000602082019050919050565b6000610f2a82610ec5565b610f348185610ed0565b9350610f3f83610edb565b8060005b83811015610f70578151610f578882610efa565b9750610f6283610f12565b925050600181019050610f43565b5085935050505092915050565b6000610f898284610f1f565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610fc981610955565b82525050565b6000610fdb8383610fc0565b60208301905092915050565b6000602082019050919050565b6000610fff82610f94565b6110098185610f9f565b935061101483610fb0565b8060005b8381101561104557815161102c8882610fcf565b975061103783610fe7565b925050600181019050611018565b5085935050505092915050565b6000602082019050818103600083015261106c8184610ff4565b905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110aa601f83610dbb565b91506110b582611074565b602082019050919050565b600060208201905081810360008301526110d98161109d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611116602083610dbb565b9150611121826110e0565b602082019050919050565b6000602082019050818103600083015261114581611109565b905091905056fea2646970667358221220a433432cec5f3e39a62bd7c1ca4cd9fb6b96f61ca7814df54f42bb976d8af0a364736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063d0e30db01161004e578063d0e30db01461010c578063f2fde38b14610116578063f8b2cb4f1461013f578063ffc3a7691461017c57610086565b80633ccfd60b146100885780636f9fb98a1461009f578063715018a6146100ca5780638da5cb5b146100e157610086565b3661008657005b005b34801561009457600080fd5b5061009d610198565b005b3480156100ab57600080fd5b506100b4610357565b6040516100c1919061096e565b60405180910390f35b3480156100d657600080fd5b506100df61035f565b005b3480156100ed57600080fd5b506100f6610373565b60405161010391906109ca565b60405180910390f35b61011461039d565b005b34801561012257600080fd5b5061013d60048036038101906101389190610a25565b610495565b005b34801561014b57600080fd5b5061016660048036038101906101619190610a25565b610518565b604051610173919061096e565b60405180910390f35b61019660048036038101906101919190610c9a565b610561565b005b6101a06107b0565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161021e576040517f483720f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161028990610d43565b60006040518083038185875af1925050503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b5050905080610306576040517fa5f1298c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42823373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860405160405180910390a450506103556107ff565b565b600047905090565b610367610809565b6103716000610887565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600034116103d7576040517fa0d73a6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104269190610d87565b92505081905550343073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d74260405161048b919061096e565b60405180910390a4565b61049d610809565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610e3e565b60405180910390fd5b61051581610887565b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105696107b0565b600034116105a3576040517fa0d73a6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b82518161ffff1610156105f357828161ffff16815181106105cb576105ca610e5e565b5b6020026020010151826105de9190610d87565b915080806105eb90610e9b565b9150506105a7565b503481111561062e576040517fab37f93600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83518161ffff16101561073d576000848261ffff168151811061065757610656610e5e565b5b602002602001015190506000848361ffff168151811061067a57610679610e5e565b5b6020026020010151905060008273ffffffffffffffffffffffffffffffffffffffff16826040516106aa90610d43565b60006040518083038185875af1925050503d80600081146106e7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ec565b606091505b5050905080610727576040517fa5f1298c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050808061073590610e9b565b915050610631565b50428360405161074d9190610f7d565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f5289ea29c00d54993a3df17183f2e808fac6b4734c61c932955a66908248a4138560405161079b9190611052565b60405180910390a4506107ac6107ff565b5050565b6002600054036107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec906110c0565b60405180910390fd5b6002600081905550565b6001600081905550565b61081161094d565b73ffffffffffffffffffffffffffffffffffffffff1661082f610373565b73ffffffffffffffffffffffffffffffffffffffff1614610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c9061112c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61096881610955565b82525050565b6000602082019050610983600083018461095f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b482610989565b9050919050565b6109c4816109a9565b82525050565b60006020820190506109df60008301846109bb565b92915050565b6000604051905090565b600080fd5b600080fd5b610a02816109a9565b8114610a0d57600080fd5b50565b600081359050610a1f816109f9565b92915050565b600060208284031215610a3b57610a3a6109ef565b5b6000610a4984828501610a10565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610aa082610a57565b810181811067ffffffffffffffff82111715610abf57610abe610a68565b5b80604052505050565b6000610ad26109e5565b9050610ade8282610a97565b919050565b600067ffffffffffffffff821115610afe57610afd610a68565b5b602082029050602081019050919050565b600080fd5b6000610b27610b2284610ae3565b610ac8565b90508083825260208201905060208402830185811115610b4a57610b49610b0f565b5b835b81811015610b735780610b5f8882610a10565b845260208401935050602081019050610b4c565b5050509392505050565b600082601f830112610b9257610b91610a52565b5b8135610ba2848260208601610b14565b91505092915050565b600067ffffffffffffffff821115610bc657610bc5610a68565b5b602082029050602081019050919050565b610be081610955565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b6000610c16610c1184610bab565b610ac8565b90508083825260208201905060208402830185811115610c3957610c38610b0f565b5b835b81811015610c625780610c4e8882610bee565b845260208401935050602081019050610c3b565b5050509392505050565b600082601f830112610c8157610c80610a52565b5b8135610c91848260208601610c03565b91505092915050565b60008060408385031215610cb157610cb06109ef565b5b600083013567ffffffffffffffff811115610ccf57610cce6109f4565b5b610cdb85828601610b7d565b925050602083013567ffffffffffffffff811115610cfc57610cfb6109f4565b5b610d0885828601610c6c565b9150509250929050565b600081905092915050565b50565b6000610d2d600083610d12565b9150610d3882610d1d565b600082019050919050565b6000610d4e82610d20565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9282610955565b9150610d9d83610955565b9250828201905080821115610db557610db4610d58565b5b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e28602683610dbb565b9150610e3382610dcc565b604082019050919050565b60006020820190508181036000830152610e5781610e1b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061ffff82169050919050565b6000610ea682610e8d565b915061ffff8203610eba57610eb9610d58565b5b600182019050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b610ef4816109a9565b82525050565b6000610f068383610eeb565b60208301905092915050565b6000602082019050919050565b6000610f2a82610ec5565b610f348185610ed0565b9350610f3f83610edb565b8060005b83811015610f70578151610f578882610efa565b9750610f6283610f12565b925050600181019050610f43565b5085935050505092915050565b6000610f898284610f1f565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610fc981610955565b82525050565b6000610fdb8383610fc0565b60208301905092915050565b6000602082019050919050565b6000610fff82610f94565b6110098185610f9f565b935061101483610fb0565b8060005b8381101561104557815161102c8882610fcf565b975061103783610fe7565b925050600181019050611018565b5085935050505092915050565b6000602082019050818103600083015261106c8184610ff4565b905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110aa601f83610dbb565b91506110b582611074565b602082019050919050565b600060208201905081810360008301526110d98161109d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611116602083610dbb565b9150611121826110e0565b602082019050919050565b6000602082019050818103600083015261114581611109565b905091905056fea2646970667358221220a433432cec5f3e39a62bd7c1ca4cd9fb6b96f61ca7814df54f42bb976d8af0a364736f6c63430008100033",
  "devdoc": {
    "author": "Ali Murtaza Memon",
    "custom:portfolio": "This is a portfolio smart contract.",
    "events": {
      "Deposit(address,address,uint256,uint256)": {
        "params": {
          "receiver": "is the address of the contract which will receive the user funds.",
          "sender": "is the address of the caller of deposit function.",
          "timestamp": "is the time when the event will trigger.",
          "value": "is the uint256 type amount that sender will deposit."
        }
      },
      "Transfer(address,address[],uint256,uint256[])": {
        "params": {
          "amounts": "is the  the array of amounts according the order of addresses which receivers will receive.",
          "from": "is the address of user tranfering funds.",
          "timestamp": "is the time when this event will trigger.",
          "to": "is the array of addressess of users who will receive funds."
        }
      },
      "Withdraw(address,uint256,uint256)": {
        "params": {
          "caller": "is the address of the user who will call the withdraw function.",
          "timestamp": "is the time when this event will trigger.",
          "value": "is the amount that will be withdrawn from user balance."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getBalance(address)": {
        "params": {
          "accountAddress": "of the user."
        },
        "returns": {
          "_0": "balance of user of type uint256 will be returned."
        }
      },
      "getContractBalance()": {
        "returns": {
          "_0": "balance of smart contract of type uint256 will be returned."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address[],uint256[])": {
        "details": "This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.The length of addresses and amounts array should be equal.The sum of amounts should not be greater than the msg.value.example: If the msg.value will be let's say 4 ethers and we only tranfer 2 ethers to addresses then 2 ethers will store inside the contract address. This could be accidental state.",
        "params": {
          "amounts": "will be an array of amounts.",
          "receivers": "will be an array of addresses."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete."
      }
    },
    "title": "Wallet Smart Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,address,uint256,uint256)": {
        "notice": "Emit the information about sender and the amount it deposited on deposit function call."
      },
      "Transfer(address,address[],uint256,uint256[])": {
        "notice": "Emit the information about sender, receivers, amounts and the timestamp when the transfer event will trigger."
      },
      "Withdraw(address,uint256,uint256)": {
        "notice": "Emit the information about the caller, amount and timestamp when this event will trigger."
      }
    },
    "kind": "user",
    "methods": {
      "deposit()": {
        "notice": "using deposit function any users can store their funds to their allocated mapping location."
      },
      "getBalance(address)": {
        "notice": "getBalance will return the balance information of users funds."
      },
      "getContractBalance()": {
        "notice": "contractBalance will return the balance information of a smart contract."
      },
      "transfer(address[],uint256[])": {
        "notice": "using transfer function users can transfer funds to address(s)."
      },
      "withdraw()": {
        "notice": "using withdraw function users can get back their funds."
      }
    },
    "notice": "This smart contract works as a bank, users can deposit, withdrawn and transfer funds to other addresses.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 209,
        "contract": "contracts/Wallet.sol:Wallet",
        "label": "s_addressToFunds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n// * imports\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// * custom erros\nerror Wallet__FailedToTransfer();\nerror Wallet__ZeroBalance();\nerror Wallet__ValueShouldBeGreaterThanZero();\nerror Wallet__ValueIsLessThanTotalAmounts();\n\n/**\n    @title Wallet Smart Contract\n    @author Ali Murtaza Memon\n    @notice This smart contract works as a bank, users can deposit, withdrawn and transfer funds to other addresses.\n    @custom:portfolio This is a portfolio smart contract.\n*/\ncontract Wallet is ReentrancyGuard, Ownable {\n    // * STATIC VARIABLES\n\n    // * mappings\n    mapping(address => uint256) private s_addressToFunds;\n\n    // * EVENTS\n    /**\n     * @notice Emit the information about sender and the amount it deposited on deposit function call.\n     * @param sender is the address of the caller of deposit function.\n     * @param receiver is the address of the contract which will receive the user funds.\n     * @param timestamp is the time when the event will trigger.\n     * @param value is the uint256 type amount that sender will deposit.\n     */\n    event Deposit(\n        address indexed sender,\n        address indexed receiver,\n        uint256 indexed timestamp,\n        uint256 value\n    );\n    /**\n     * @notice Emit the information about the caller, amount and timestamp when this event will trigger.\n     * @param caller is the address of the user who will call the withdraw function.\n     * @param value is the amount that will be withdrawn from user balance.\n     * @param timestamp is the time when this event will trigger.\n     */\n    event Withdraw(\n        address indexed caller,\n        uint256 indexed value,\n        uint256 indexed timestamp\n    );\n    /**\n     * @notice Emit the information about sender, receivers, amounts and the timestamp when the transfer event will trigger.\n     * @param from is the address of user tranfering funds.\n     * @param to is the array of addressess of users who will receive funds.\n     * @param timestamp is the time when this event will trigger.\n     * @param amounts is the  the array of amounts according the order of addresses which receivers will receive.\n     */\n    event Transfer(\n        address indexed from,\n        address[] indexed to,\n        uint256 indexed timestamp,\n        uint256[] amounts\n    );\n\n    // * FUNCTIONS\n\n    // * receive function\n    receive() external payable {}\n\n    // * fallback function\n    fallback() external payable {}\n\n    // * external functions\n\n    /**\n        @notice using deposit function any users can store their funds to their allocated mapping location.\n    */\n    function deposit() external payable {\n        if (msg.value <= 0) {\n            revert Wallet__ValueShouldBeGreaterThanZero();\n        }\n\n        s_addressToFunds[msg.sender] += msg.value;\n        emit Deposit(msg.sender, address(this), block.timestamp, msg.value);\n    }\n\n    /**\n        @notice using withdraw function users can get back their funds.\n        @dev This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.\n    */\n    function withdraw() external nonReentrant {\n        uint256 amount = s_addressToFunds[msg.sender];\n\n        if (amount <= 0) {\n            revert Wallet__ZeroBalance();\n        }\n\n        s_addressToFunds[msg.sender] = 0;\n\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        if (!success) {\n            revert Wallet__FailedToTransfer();\n        }\n        emit Withdraw(msg.sender, amount, block.timestamp);\n    }\n\n    /**\n        @notice using transfer function users can transfer funds to address(s).\n        @dev This function is using nonReentrant from Openzeppelin's ReentrancyGuard. This will lock our function until it will not complete.\n        @dev The length of addresses and amounts array should be equal.\n        @dev The sum of amounts should not be greater than the msg.value.\n        @dev example: If the msg.value will be let's say 4 ethers and we only tranfer 2 ethers to addresses then 2 ethers will store inside the contract address. This could be accidental state.\n        @param receivers will be an array of addresses.\n        @param amounts will be an array of amounts.\n    */\n    function transfer(\n        address[] memory receivers,\n        uint256[] memory amounts\n    ) external payable nonReentrant {\n        if (msg.value <= 0) {\n            revert Wallet__ValueShouldBeGreaterThanZero();\n        }\n\n        // * calculate the sum of amounts.\n        uint256 sum = 0;\n\n        for (uint16 i = 0; i < amounts.length; i++) {\n            sum += amounts[i];\n        }\n\n        // * check if sum is greater than `msg.value` then revert the error.\n        if (sum > msg.value) {\n            revert Wallet__ValueIsLessThanTotalAmounts();\n        }\n\n        for (uint16 i = 0; i < receivers.length; i++) {\n            address receiver = receivers[i];\n            uint256 amount = amounts[i];\n\n            (bool success, ) = payable(receiver).call{value: amount}(\"\");\n            if (!success) {\n                revert Wallet__FailedToTransfer();\n            }\n        }\n        emit Transfer(msg.sender, receivers, block.timestamp, amounts);\n    }\n\n    // * view function\n\n    /**\n        @notice getBalance will return the balance information of users funds.\n        @param accountAddress of the user.\n        @return balance of user of type uint256 will be returned.\n    */\n    function getBalance(\n        address accountAddress\n    ) external view returns (uint256) {\n        return s_addressToFunds[accountAddress];\n    }\n\n    /**\n        @notice contractBalance will return the balance information of a smart contract.\n        @return balance of smart contract of type uint256 will be returned.\n    */\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}